// Clean lists
%clean-lists {
  list-style: none;
  margin: 0;
  padding: 0;
}

%center {
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
  transform: translate(-50%, -50%);
}

%centerx {
  position: absolute;
  left: 50%;
  -webkit-transform: translateX(-50%);
  transform: translateX(-50%);
}

%centery {
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  transform: translateY(-50%);
}

%clean-button-or-input {
  appearance: none;
  box-shadow: none;
  background: none;
  border: 0;
}

//Fonts includer
@mixin font-face($font-name, $font-file, $weight, $style: "normal") {
  @font-face {
    font-family: $font-name;
    src: font-url("#{$font-file}.eot");
    src: font-url("#{$font-file}.eot?#iefix") format("embedded-opentype"),
         // font-url("#{$font-file}.woff2") format("woff2"),
         font-url("#{$font-file}.woff") format("woff"),
         font-url("#{$font-file}.ttf") format("truetype"),
         font-url("#{$font-file}.svg") format("svg");
    font-weight: $weight;
    font-style: $style;
  }
}

@mixin equi-triangle($triangle-size, $triangle-color, $triangle-direction) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: inset $triangle-size;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
    border-top-style: solid;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
    border-bottom-style: solid;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}

//Forms mixins
@mixin placeholder() {
  &::-webkit-input-placeholder {@content}
  &:-moz-placeholder {@content}
  &::-moz-placeholder {@content}
  &:-ms-input-placeholder {@content}
}

// A helper to transform PX to REM unit
@function rem($px, $base: $rem-base) {
  @return ($px / $base) * 1rem;
}

